{"ast":null,"code":"const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://shard-flip-9nvm.vercel.app/api';\nconst API_SECRET_KEY = process.env.REACT_APP_API_SECRET_KEY || 'my0suoer-secret-environment-key-for-api\\'s-security';\n\n// Debug environment variables\nconsole.log('üîß API Service Config:', {\n  baseUrl: API_BASE_URL,\n  hasApiKey: !!API_SECRET_KEY,\n  envApiUrl: process.env.REACT_APP_API_URL,\n  envHasKey: !!process.env.REACT_APP_API_SECRET_KEY,\n  usingDefault: !process.env.REACT_APP_API_SECRET_KEY\n});\nclass ApiService {\n  async makeRequest(endpoint, options = {}) {\n    try {\n      const url = `${API_BASE_URL}${endpoint}`;\n      console.log('üîó API Request:', options.method || 'GET', url);\n      const defaultHeaders = {\n        'Content-Type': 'application/json'\n      };\n\n      // Add API key for POST requests\n      if (options.method === 'POST' && API_SECRET_KEY) {\n        defaultHeaders['x-api-key'] = API_SECRET_KEY;\n        console.log('üîë API key added to request');\n      } else if (options.method === 'POST') {\n        console.warn('‚ö†Ô∏è No API key found for POST request!');\n      }\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...defaultHeaders,\n          ...options.headers\n        }\n      });\n\n      // Check if response is actually JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error(`Expected JSON response but got ${contentType || 'unknown'} content type`);\n      }\n      const data = await response.json();\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP ${response.status}`);\n      }\n      return data;\n    } catch (error) {\n      console.error(`API Error [${endpoint}]:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error'\n      };\n    }\n  }\n\n  // POST Routes (Protected)\n  async registerWallet(walletAddress) {\n    return this.makeRequest('/register-wallet', {\n      method: 'POST',\n      body: JSON.stringify({\n        walletAddress\n      })\n    });\n  }\n  async updateGameResult(walletAddress, gameResult, amountWagered, amountWon) {\n    return this.makeRequest('/update-game', {\n      method: 'POST',\n      body: JSON.stringify({\n        walletAddress,\n        gameResult,\n        amountWagered,\n        amountWon\n      })\n    });\n  }\n\n  // GET Routes (Public)\n  async getUser(walletAddress) {\n    return this.makeRequest(`/user/${walletAddress}`);\n  }\n  async getLeaderboard(type = 'wins', limit = 20) {\n    return this.makeRequest(`/leaderboard?type=${type}&limit=${limit}`);\n  }\n  async getPlatformStats() {\n    return this.makeRequest('/stats');\n  }\n  async getAllUsers(page = 1, limit = 50, sortBy = 'registeredAt', order = 'desc') {\n    return this.makeRequest(`/users?page=${page}&limit=${limit}&sortBy=${sortBy}&order=${order}`);\n  }\n  async healthCheck() {\n    return this.makeRequest('/health');\n  }\n}\nexport const apiService = new ApiService();","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","API_SECRET_KEY","REACT_APP_API_SECRET_KEY","console","log","baseUrl","hasApiKey","envApiUrl","envHasKey","usingDefault","ApiService","makeRequest","endpoint","options","url","method","defaultHeaders","warn","response","fetch","headers","contentType","get","includes","Error","data","json","ok","message","status","error","success","registerWallet","walletAddress","body","JSON","stringify","updateGameResult","gameResult","amountWagered","amountWon","getUser","getLeaderboard","type","limit","getPlatformStats","getAllUsers","page","sortBy","order","healthCheck","apiService"],"sources":["/Users/nikhilkumar/Documents/Unstable/Shard-Flip/src/services/apiService.ts"],"sourcesContent":["const API_BASE_URL = process.env.REACT_APP_API_URL || 'https://shard-flip-9nvm.vercel.app/api';\nconst API_SECRET_KEY = process.env.REACT_APP_API_SECRET_KEY || 'my0suoer-secret-environment-key-for-api\\'s-security';\n\n// Debug environment variables\nconsole.log('üîß API Service Config:', {\n  baseUrl: API_BASE_URL,\n  hasApiKey: !!API_SECRET_KEY,\n  envApiUrl: process.env.REACT_APP_API_URL,\n  envHasKey: !!process.env.REACT_APP_API_SECRET_KEY,\n  usingDefault: !process.env.REACT_APP_API_SECRET_KEY\n});\n\ninterface ApiResponse<T = any> {\n  success: boolean;\n  message?: string;\n  data?: T;\n  error?: string;\n}\n\ninterface User {\n  walletAddress: string;\n  hasPlayedGame: boolean;\n  totalGamesPlayed: number;\n  totalWins: number;\n  totalLosses: number;\n  totalAmountWagered: number;\n  totalAmountWon: number;\n  lastGameResult: 'win' | 'loss' | null;\n  registeredAt: string;\n  lastUpdated: string;\n}\n\ninterface LeaderboardEntry {\n  rank: number;\n  walletAddress: string;\n  totalWins: number;\n  totalLosses: number;\n  totalGamesPlayed: number;\n  winRate: string;\n  totalAmountWon: number;\n  totalAmountWagered: number;\n  netProfit: number;\n  registeredAt: string;\n}\n\ninterface PlatformStats {\n  totalRegisteredUsers: number;\n  totalActivePlayers: number;\n  totalGamesPlayed: number;\n  totalWins: number;\n  totalLosses: number;\n  overallWinRate: string;\n  totalAmountWagered: number;\n  totalAmountWon: number;\n  houseEdge: string;\n}\n\nclass ApiService {\n  private async makeRequest<T>(\n    endpoint: string,\n    options: RequestInit = {}\n  ): Promise<ApiResponse<T>> {\n    try {\n      const url = `${API_BASE_URL}${endpoint}`;\n      console.log('üîó API Request:', options.method || 'GET', url);\n      \n      const defaultHeaders: HeadersInit = {\n        'Content-Type': 'application/json',\n      };\n\n      // Add API key for POST requests\n      if (options.method === 'POST' && API_SECRET_KEY) {\n        defaultHeaders['x-api-key'] = API_SECRET_KEY;\n        console.log('üîë API key added to request');\n      } else if (options.method === 'POST') {\n        console.warn('‚ö†Ô∏è No API key found for POST request!');\n      }\n\n      const response = await fetch(url, {\n        ...options,\n        headers: {\n          ...defaultHeaders,\n          ...options.headers,\n        },\n      });\n\n      // Check if response is actually JSON\n      const contentType = response.headers.get('content-type');\n      if (!contentType || !contentType.includes('application/json')) {\n        throw new Error(`Expected JSON response but got ${contentType || 'unknown'} content type`);\n      }\n\n      const data = await response.json();\n\n      if (!response.ok) {\n        throw new Error(data.message || `HTTP ${response.status}`);\n      }\n\n      return data;\n    } catch (error) {\n      console.error(`API Error [${endpoint}]:`, error);\n      return {\n        success: false,\n        error: error instanceof Error ? error.message : 'Unknown error',\n      };\n    }\n  }\n\n  // POST Routes (Protected)\n  async registerWallet(walletAddress: string): Promise<ApiResponse<User>> {\n    return this.makeRequest<User>('/register-wallet', {\n      method: 'POST',\n      body: JSON.stringify({ walletAddress }),\n    });\n  }\n\n  async updateGameResult(\n    walletAddress: string,\n    gameResult: 'win' | 'loss',\n    amountWagered: number,\n    amountWon?: number\n  ): Promise<ApiResponse<User>> {\n    return this.makeRequest<User>('/update-game', {\n      method: 'POST',\n      body: JSON.stringify({\n        walletAddress,\n        gameResult,\n        amountWagered,\n        amountWon,\n      }),\n    });\n  }\n\n  // GET Routes (Public)\n  async getUser(walletAddress: string): Promise<ApiResponse<User>> {\n    return this.makeRequest<User>(`/user/${walletAddress}`);\n  }\n\n  async getLeaderboard(\n    type: 'wins' | 'games' | 'winnings' = 'wins',\n    limit: number = 20\n  ): Promise<ApiResponse<LeaderboardEntry[]>> {\n    return this.makeRequest<LeaderboardEntry[]>(\n      `/leaderboard?type=${type}&limit=${limit}`\n    );\n  }\n\n  async getPlatformStats(): Promise<ApiResponse<PlatformStats>> {\n    return this.makeRequest<PlatformStats>('/stats');\n  }\n\n  async getAllUsers(\n    page: number = 1,\n    limit: number = 50,\n    sortBy: string = 'registeredAt',\n    order: 'asc' | 'desc' = 'desc'\n  ): Promise<ApiResponse<{\n    data: User[];\n    pagination: {\n      currentPage: number;\n      totalPages: number;\n      totalUsers: number;\n      hasMore: boolean;\n    };\n  }>> {\n    return this.makeRequest(\n      `/users?page=${page}&limit=${limit}&sortBy=${sortBy}&order=${order}`\n    );\n  }\n\n  async healthCheck(): Promise<ApiResponse<{ message: string; timestamp: string }>> {\n    return this.makeRequest('/health');\n  }\n}\n\nexport const apiService = new ApiService();\nexport type { User, LeaderboardEntry, PlatformStats, ApiResponse };"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}