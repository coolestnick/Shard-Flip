{"ast":null,"code":"export class SoundService {\n  constructor() {\n    this.sounds = new Map();\n    this.enabled = true;\n    this.volume = 0.5;\n    this.loadSounds();\n    this.loadSettings();\n  }\n  loadSounds() {\n    const soundFiles = {\n      flip: '/sounds/coin-flip.wav',\n      win: '/sounds/win.wav',\n      lose: '/sounds/lose.wav',\n      click: '/sounds/click.wav'\n    };\n    Object.entries(soundFiles).forEach(([name, path]) => {\n      const audio = new Audio();\n      audio.preload = 'auto';\n      audio.volume = this.volume;\n\n      // Create a simple beep sound programmatically since we don't have actual files\n      this.createBeepSound(name, audio);\n      this.sounds.set(name, audio);\n    });\n  }\n  createBeepSound(type, audio) {\n    // Create different frequency beeps for different sound types\n    const frequencies = {\n      flip: 440,\n      win: 523.25,\n      // C5\n      lose: 220,\n      // A3\n      click: 880 // A5\n    };\n    const frequency = frequencies[type] || 440;\n\n    // Create AudioContext for programmatic sound generation\n    if (typeof AudioContext !== 'undefined' || typeof window.webkitAudioContext !== 'undefined') {\n      try {\n        const audioContext = new (AudioContext || window.webkitAudioContext)();\n        audio.addEventListener('play', () => {\n          if (!this.enabled) return;\n          const oscillator = audioContext.createOscillator();\n          const gainNode = audioContext.createGain();\n          oscillator.connect(gainNode);\n          gainNode.connect(audioContext.destination);\n          oscillator.frequency.value = frequency;\n          oscillator.type = 'sine';\n          gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n          gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, audioContext.currentTime + 0.01);\n          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);\n          oscillator.start(audioContext.currentTime);\n          oscillator.stop(audioContext.currentTime + 0.3);\n        });\n      } catch (error) {\n        console.warn('Web Audio API not supported:', error);\n      }\n    }\n  }\n  loadSettings() {\n    const savedEnabled = localStorage.getItem('sound-enabled');\n    const savedVolume = localStorage.getItem('sound-volume');\n    if (savedEnabled !== null) {\n      this.enabled = JSON.parse(savedEnabled);\n    }\n    if (savedVolume !== null) {\n      this.volume = parseFloat(savedVolume);\n    }\n  }\n  saveSettings() {\n    localStorage.setItem('sound-enabled', JSON.stringify(this.enabled));\n    localStorage.setItem('sound-volume', this.volume.toString());\n  }\n  play(soundName) {\n    if (!this.enabled) return;\n    const sound = this.sounds.get(soundName);\n    if (sound) {\n      sound.currentTime = 0;\n      sound.volume = this.volume;\n      sound.play().catch(console.warn);\n    }\n  }\n  setEnabled(enabled) {\n    this.enabled = enabled;\n    this.saveSettings();\n  }\n  setVolume(volume) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    this.sounds.forEach(sound => {\n      sound.volume = this.volume;\n    });\n    this.saveSettings();\n  }\n  isEnabled() {\n    return this.enabled;\n  }\n  getVolume() {\n    return this.volume;\n  }\n}\nexport const soundService = new SoundService();","map":{"version":3,"names":["SoundService","constructor","sounds","Map","enabled","volume","loadSounds","loadSettings","soundFiles","flip","win","lose","click","Object","entries","forEach","name","path","audio","Audio","preload","createBeepSound","set","type","frequencies","frequency","AudioContext","window","webkitAudioContext","audioContext","addEventListener","oscillator","createOscillator","gainNode","createGain","connect","destination","value","gain","setValueAtTime","currentTime","linearRampToValueAtTime","exponentialRampToValueAtTime","start","stop","error","console","warn","savedEnabled","localStorage","getItem","savedVolume","JSON","parse","parseFloat","saveSettings","setItem","stringify","toString","play","soundName","sound","get","catch","setEnabled","setVolume","Math","max","min","isEnabled","getVolume","soundService"],"sources":["/Users/nickkz/Desktop/Shard-Flip/src/services/soundService.ts"],"sourcesContent":["export class SoundService {\n  private sounds: Map<string, HTMLAudioElement> = new Map();\n  private enabled: boolean = true;\n  private volume: number = 0.5;\n\n  constructor() {\n    this.loadSounds();\n    this.loadSettings();\n  }\n\n  private loadSounds() {\n    const soundFiles = {\n      flip: '/sounds/coin-flip.wav',\n      win: '/sounds/win.wav', \n      lose: '/sounds/lose.wav',\n      click: '/sounds/click.wav'\n    };\n\n    Object.entries(soundFiles).forEach(([name, path]) => {\n      const audio = new Audio();\n      audio.preload = 'auto';\n      audio.volume = this.volume;\n      \n      // Create a simple beep sound programmatically since we don't have actual files\n      this.createBeepSound(name, audio);\n      this.sounds.set(name, audio);\n    });\n  }\n\n  private createBeepSound(type: string, audio: HTMLAudioElement) {\n    // Create different frequency beeps for different sound types\n    const frequencies: { [key: string]: number } = {\n      flip: 440,\n      win: 523.25, // C5\n      lose: 220,   // A3\n      click: 880   // A5\n    };\n\n    const frequency = frequencies[type] || 440;\n    \n    // Create AudioContext for programmatic sound generation\n    if (typeof AudioContext !== 'undefined' || typeof (window as any).webkitAudioContext !== 'undefined') {\n      try {\n        const audioContext = new (AudioContext || (window as any).webkitAudioContext)();\n        \n        audio.addEventListener('play', () => {\n          if (!this.enabled) return;\n          \n          const oscillator = audioContext.createOscillator();\n          const gainNode = audioContext.createGain();\n          \n          oscillator.connect(gainNode);\n          gainNode.connect(audioContext.destination);\n          \n          oscillator.frequency.value = frequency;\n          oscillator.type = 'sine';\n          \n          gainNode.gain.setValueAtTime(0, audioContext.currentTime);\n          gainNode.gain.linearRampToValueAtTime(this.volume * 0.3, audioContext.currentTime + 0.01);\n          gainNode.gain.exponentialRampToValueAtTime(0.001, audioContext.currentTime + 0.3);\n          \n          oscillator.start(audioContext.currentTime);\n          oscillator.stop(audioContext.currentTime + 0.3);\n        });\n      } catch (error) {\n        console.warn('Web Audio API not supported:', error);\n      }\n    }\n  }\n\n  private loadSettings() {\n    const savedEnabled = localStorage.getItem('sound-enabled');\n    const savedVolume = localStorage.getItem('sound-volume');\n    \n    if (savedEnabled !== null) {\n      this.enabled = JSON.parse(savedEnabled);\n    }\n    \n    if (savedVolume !== null) {\n      this.volume = parseFloat(savedVolume);\n    }\n  }\n\n  private saveSettings() {\n    localStorage.setItem('sound-enabled', JSON.stringify(this.enabled));\n    localStorage.setItem('sound-volume', this.volume.toString());\n  }\n\n  play(soundName: string) {\n    if (!this.enabled) return;\n    \n    const sound = this.sounds.get(soundName);\n    if (sound) {\n      sound.currentTime = 0;\n      sound.volume = this.volume;\n      sound.play().catch(console.warn);\n    }\n  }\n\n  setEnabled(enabled: boolean) {\n    this.enabled = enabled;\n    this.saveSettings();\n  }\n\n  setVolume(volume: number) {\n    this.volume = Math.max(0, Math.min(1, volume));\n    this.sounds.forEach(sound => {\n      sound.volume = this.volume;\n    });\n    this.saveSettings();\n  }\n\n  isEnabled(): boolean {\n    return this.enabled;\n  }\n\n  getVolume(): number {\n    return this.volume;\n  }\n}\n\nexport const soundService = new SoundService();"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}